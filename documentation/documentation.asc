== NUCLAB

This is a +++<del>+++genius+++</del>+++ handsome framework worked out by +++<del>+++genius+++</del>+++ handsome people to create Infrastructure-as-Code environments. 

It accomplishes the automated, standardized setup of whole Linux/Virtualization/Kubenrnetes platforms. +
Note: The whole project is built and tested on RHEL 8. 

=== Quick start guide: 
==== Prerequisits: 

* Have RHEL 8.3 deployed
** LVM preferred
* Have Subscriptions: 
** Have RHEL+Ansible subscriptions available
* Have configuration management
** Have a repository for your custom configuration (Git is supported) - see the section "Customization: Required variables"
** Have an encryption key defined 
** Have your public key authentication against the private config repo set up

==== Steps to follow: 

* After the RHEL 8 deployment have the script run the platform prep script (subscription, repos, updates, ansible, ansible user, sudoers...)
** scripts/step0_platformprep.sh
* After the script run the main playbook:
**  ansible-playbook -i hosts.yml main.yml --vault-password-file=/INSERT_YOUR_VAULTPW_FILE_PATH_HERE 

== Detailed setup steps: 

=== Customization: Required variables

You'll need two main sources of information. +
One is the URL to your private git repository where your configuration is stored. 
The other is the content of that git repository itself. 

==== Your private repo's URL stored locally: 
To define where you keep your private repository, we need to set a variable in the directory ansible/local_vars: 

----
[kvegh@kvegh ansible]$ ansible-vault view local_vars/private_repo_url.yml 
Vault password: 
private_repo_url: git@github.com:INSERTUSERHERE/INSERT_REPOID_HERE.git

[kvegh@kvegh ansible]$ 
----

For details on accessing private repos in github with public key based authentication, see: https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/connecting-to-github-with-ssh +
For details on encrypting data with ansible-vault, see: https://docs.ansible.com/ansible/latest/user_guide/vault.html

That repository is going to be used by the ansible playbooks. 

==== The contents of the private repo: 

The contents of your private repo contain separate variables in separate files. Optionally encrypted. +
To ease documentation, every variable filename is the same as the variable name it contains: 

----
[kvegh@kvegh nuclab_private]$ ls vars/
contenthub_token.yml  user_list.yml
[kvegh@kvegh nuclab_private]$ ansible-vault view vars/user_list.yml 
Vault password: 
user_list: 
  - user1
  - user2
  - user3 
[kvegh@kvegh nuclab_private]$ ansible-vault view vars/contenthub_token.yml 
Vault password: 
contenthub_token: INSERT_YOUR_AUTOMATION_HUB_GENERATED_AUTH_TOKEN_HERE
[kvegh@kvegh nuclab_private]$ 
----


=== Prepare the system

* Download RHEL 8
* Install 
** preferably with LVM, so that we can use boom for snapshotted fallbacks

1st steps - we need: 

* subscription for RHEL and Ansible 
* Access to the Ansible repository
* Ansible installed
* Ansible user created 
* sudoers set up

You'll find a shellscript that does most of this, before you have ansible available:  
----
[kvegh@host0 nuclab]$ sudo scripts/step0_platformprep.sh 

######################
# NUCLAB first steps #
######################

Running as root, good... 

Testing subscription status
...subscription looks good, let's move on... 

Checking if the ansible repo is enabled
...repo is enabled, good. 

Checking if ansible is installed
...Ansible is already installed. 

Setting sudoers for the wheel group, if sudoers is unchanged
...sudoers seems to be already configured. 

Checking if the user ansible exists
...Ansible user is already existing 

Checking if git is installed
...git is already installed. 

Cloning the nuclab repository
...done, cloned to /home/ansible/nuclab .

Updating entire system...
...all good. You should reboot, and create a boom snapshot for fallback now. 

Ready to rock'n'roll, reboot, [consider the boom boot option] and run your playbooks.
----

=== Running the main Ansible role: 

If you have a look at the top-level main.yml playbook, you'll find that as of now it runs the following roles: 

* base_packages: to deploy some RPMs we need for work 
* dnsmasq: to run (surprise!) dnsmasq. We need to have DNS to deploy RHV. 
* create_local_users: to (yes, you guessed it) create the local users who need local personalized useraccess to the systems.
* content_hub_connect: creates the ansible-galaxy setup to the official Automation Hub (ansible sub needed) 

The first two are pretty straightforward, see the source for documentation. 

But let's talk Users: 

==== Users 

The script above (step0_platforprep.sh) creates an ansible user. 

All the other personalized users will be created by the ansible role "create_local_users": 
That role reads two encrypted variables:

* "private_repo_url" from the main repository's local_vars directory. We came up with this to have a separate git repository with our configuration data that is needed to customize the project. 
* "user_list" read from the private repository

That is, real Infrastructure-as-Code-style we keep our variables in a repository, all changes to the configuration need to be added to those config files in the separate repository. 
IOW: The userlist to be created on the platform's systems is listed in an encrypted manner in the configuration directory. 

That means, if you are to run the main.yml top-level playbook, you need to provide it with a vault-password to decrypt custom/sensitive data: 

[source,shell]
----
ansible-playbook main.yml -i hosts.yml --vault-password-file=INSERT_YOUR_VAULTPW_FILE_HERE
----




Client setup

----

[mlapagna@localhost ~]$ ssh-keygen
[mlapagna@localhost ~]$ cat .ssh/id_rsa.pub

##########################################################################
#--> add key to your github account and let you invite to collaborate :) #
##########################################################################

[mlapagna@localhost ~]$ ssh-copy-id mlapagna@nuclab.fritz.box
[mlapagna@localhost ~]$ cat .ssh/config 
Host nuclab
  HostName nuclab
  IdentityFile $HOME/.ssh/id_rsa
  ForwardAgent yes

[mlapagna@localhost ~]$ ssh nuclab

[mlapagna@nuclab ~]$ git clone git@github.com:mariuslapagna/nuclab.git
[mlapagna@nuclab nuclab]$ echo "alias run='sudo ansible-playbook -i ~/nuclab/ansible/hosts.yml ~/nuclab/ansible/main.yml --vault-password-file=/opt/nuclab/automation/keys/vaultpw'" >> ~/.bashrc
[mlapagna@nuclab ~]$ . .bashrc
[mlapagna@nuclab ~]$ echo "yourvaultPW" > /opt/nuclab/automation/keys/vaultpw
[mlapagna@nuclab ~]$ 
----

After that you can run the roles in the ansible dir: 

----

ansible-playbook -i hosts.yml main.yml --vault-password-file=/opt/nuclab/automation/keys/vaultpw 
OR
run

----

The roles do the following: 

* base_packages: ensures that some basic RPMs are installed 
* dnsmasq: sets up dnsmasq required for RHV



