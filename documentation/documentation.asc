== NUCLAB

This is a [-]#genius# handsome framework worked out by -genius- handsome people to create Infrastructure-as-Code environments. 

Note: It is built and tested on RHEL 8. 

=== Prepare the system

* Download RHEL 8
* Install 
** preferably with LVM, so that we can use boom for snapshotted fallbacks
** have a user with sudo rights to run your first playbooks

1st steps - we need: 

* subscription for RHEL and Ansible 
* Access to the Ansible repository
* ANsible installed 
* sudoers set up

You'll find a shellscript that does most of this, before you have ansible available:  
----
[root@nuclab scripts]# ./step0_platforprep.sh 
Running as root, good...
Testing subscription status
...subscription looks good, let's move on...
Checking if the ansible repo is enabled
...it isn't. Trying to enable...
...success.
Checking if ansible is installed
...it isn't, installing...
...done
Setting sudoers for the wheel group, if sudoers is unchanged
...done.
Updating entire system...
...all good. You should reboot, and create a boom snapshot for fallback now.
Ready to rock'n'roll, reboot, [consider the boom boot option] and run your playbooks.
[root@nuclab scripts]# 
----

=== Running the main Ansible role: 

If you have a look at the top-level main.yml playbook, you'll find that as of now it runs the following roles: 

* dnsmasq: to run (surprise!) dnsmasq. We need to have DNS to deploy RHV. 
* base_packages: to deploy some RPMs we need for work 
* create_local_users: to (yes, you guessed it) create the local users who need local personalized useraccess to the systems.

The first two are pretty straightforward, see the source for documentation. 

But let's talk Users: 

==== Users 

The script above (step0_platforprep.sh) creates an ansible user. 

All the other personalized users will be created by the ansible role "create_local_users": 
That role reads two encrypted variables:

* "private_repo_url" from the main repository's local_vars directory. We came up with this to have a separate git repository with our configuration data that is needed to customize the project. 
* "user_list" read from the private repository

That is, real Infrastructure-as-Code-style we keep our variables in a repository, all changes to the configuration need to be added to those config files in the separate repository. 
IOW: The userlist to be created on the platform's systems is listed in an encrypted manner in the configuration directory. 

That means, if you are to run the main.yml top-level playbook, you need to provide it with a vault-password to decrypt custom/sensitive data: 

[source,shell]
----
ansible-playbook main.yml -i hosts.yml --vault-password-file=INSERT_YOUR_VAULTPW_FILE_HERE
----




Client setup

----

[mlapagna@localhost ~]$ ssh-keygen
[mlapagna@localhost ~]$ cat .ssh/id_rsa.pub

##########################################################################
#--> add key to your github account and let you invite to collaborate :) #
##########################################################################

[mlapagna@localhost ~]$ ssh-copy-id mlapagna@nuclab.fritz.box
[mlapagna@localhost ~]$ cat .ssh/config 
Host nuclab
  HostName nuclab
  IdentityFile $HOME/.ssh/id_rsa
  ForwardAgent yes

[mlapagna@localhost ~]$ ssh nuclab

[mlapagna@nuclab ~]$ git clone git@github.com:mariuslapagna/nuclab.git
[mlapagna@nuclab nuclab]$ echo "alias run='sudo ansible-playbook -i ~/nuclab/ansible/hosts.yml ~/nuclab/ansible/main.yml --vault-password-file=/opt/nuclab/automation/keys/vaultpw'" >> ~/.bashrc
[mlapagna@nuclab ~]$ . .bashrc
echo "yourvaultPW" > /opt/nuclab/automation/keys/vaultpw
----

After that you can run the roles in the ansible dir: 

----

ansible-playbook -i hosts.yml main.yml --vault-password-file=/opt/nuclab/automation/keys/vaultpw 
OR
run

----

The roles do the following: 

* base_packages: ensures that some basic RPMs are installed 
* dnsmasq: sets up dnsmasq required for RHV



